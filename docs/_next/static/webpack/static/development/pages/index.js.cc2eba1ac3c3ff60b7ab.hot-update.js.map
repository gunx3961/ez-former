{"version":3,"file":"static/webpack/static/development/pages/index.js.cc2eba1ac3c3ff60b7ab.hot-update.js","sources":["webpack:///./src/Form.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as Immutable from 'immutable';\n\nimport FormItem, { InjectedFormItemProps, FormKey } from './FormItem';\n\ntype InternalFormData = Immutable.Map<string, any>;\n\nexport interface FormProps {\n  onChange?: (data: any, k: FormKey, formData: any) => void;\n  initialData?: { [key: string]: any } | Immutable.Map<string, any>;\n  formReadOnly?: boolean;\n  children?: React.ReactNode;\n}\n\ninterface FormState {\n  formData: InternalFormData;\n}\n\nclass Form extends React.PureComponent<FormProps, FormState> {\n  public static defaultProps: FormProps = {\n    formReadOnly: false,\n  };\n\n  public readonly state: Readonly<FormState> = {\n    formData: this.props.initialData ?\n      Immutable.Map<string, any>().merge(this.props.initialData) :\n      Immutable.Map<string, any>(),\n  };\n\n  public static getDerivedStateFromProps: React.GetDerivedStateFromProps<FormProps, FormState> = (props, state) => {\n    // Maintain form fields according to `formKey` props of chilren\n    const formData = Immutable.Map<string, any>().withMutations((map) => {\n      React.Children.map(props.children, (child) => {\n        if (Form.isFormItem(child)) {\n          Form.setCalculatedValue(child as FormItem, state.formData, map);\n        }\n      });\n    });\n\n    if (state.formData.equals(formData)) return null; // or it may cause a loop rendering\n\n    return null;\n  }\n\n  public static setCalculatedValue(\n    child: FormItem,\n    prevFormData: InternalFormData,\n    nextFormData: InternalFormData,\n  ): void {\n    // Determine default value\n    const keyPath = Form.getKeyPath(child.props.formKey);\n    const prevValue = prevFormData.getIn(keyPath);\n    let valueToSet = prevValue;\n    if (child.props.defaultValue !== undefined && prevValue === undefined) {\n      valueToSet = child.props.defaultValue;\n    }\n    nextFormData.setIn(keyPath, valueToSet);\n  }\n\n  public static getKeyPath(key: FormKey): [string] {\n    if (Array.isArray(key)) return key;\n    return [key];\n  }\n\n  public static isFormItem(node: React.ReactNode): boolean {\n    if (!node || !React.isValidElement(node)) return false;\n    return node.type === FormItem;\n  }\n\n  public gatherFormItemProps = (key: FormKey): Partial<InjectedFormItemProps> => {\n    const keyPath = Form.getKeyPath(key);\n    const setFormData = (value: any) => {\n      const nextFormData = this.state.formData.setIn(keyPath, value);\n      this.setState({ formData: nextFormData });\n      if (typeof this.props.onChange === 'function') {\n        this.props.onChange(value, key, nextFormData);\n      }\n    };\n\n    return {\n      data: this.state.formData.getIn(keyPath),\n      setFormData,\n    };\n  }\n\n  public getInjectedChildren = () => {\n    const { children: childrenProp } = this.props;\n    const children = React.Children.map(childrenProp, (child) => {\n      if (Form.isFormItem(child)) {\n        return React.cloneElement(\n          child as React.ReactElement,\n          this.gatherFormItemProps((child as FormItem).props.formKey),\n        );\n      }\n      return child;\n    });\n\n    return children;\n  }\n\n  public render() {\n    const children = this.getInjectedChildren();\n\n    return (\n      <form>\n        <h1>EZ-FORMER</h1>\n        {children}\n      </form>\n    );\n  }\n}\n\nexport default Form;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAcA;;;;;;;;;;;;;;;;;;AAKA;AACA;AADA;AACA;AA6CA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAIA;AACA;AAAA;AACA;AAEA;AACA;AACA;;;;;;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAhEA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;;AAjDA;AACA;AADA;AAEA;AADA;AACA;AAFA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAqEA;;;;A","sourceRoot":""}